// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  username  String?    
  email     String     @unique
  password  String?    
  name      String?
  firstName String?
  lastName  String?
  emailVerified     String?
  role      String?    @default("user")
  image     String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  whispers  Whisper[]
  comments  Comment[]
  likes     Like[]
  accounts  Account[]
  sessions  Session[]
}

model Whisper {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  author    User        @relation(fields: [authorId], references: [id])
  authorId  String      @db.ObjectId
  comments  Comment[]
  likes     Like[]
}

model Like {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  user      User        @relation(fields: [userId], references: [id])
  userId    String      @db.ObjectId
  whisper   Whisper     @relation(fields: [whisperId], references: [id])
  whisperId String      @db.ObjectId
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@unique([userId, whisperId])
}

model Comment {
  id              String    @id @default(cuid()) @map("_id")
  title           String
  whisperId       String    @db.ObjectId  
  userId          String    @db.ObjectId  
  createdAt       DateTime  @default(now())
  whisper         Whisper   @relation(fields: [whisperId], references: [id], onDelete: Cascade)
  user            User      @relation(fields: [userId], references: [id])
}


model Account {
  id                 String  @id @default(cuid()) @map("_id")
  userId             String  @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.String
  access_token       String? @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.String
  session_state      String?

  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id               String      @id @default(cuid()) @map("_id")
  sessionToken     String      @unique
  userId           String      @db.ObjectId 
  expires          DateTime
  user             User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model VerificationToken {
  id                 String   @id @default(cuid()) @map("_id")
  user_id            String   @unique @map("user_id")
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  id_token           String?  @db.String
}